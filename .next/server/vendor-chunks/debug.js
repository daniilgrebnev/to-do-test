"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/debug";
exports.ids = ["vendor-chunks/debug"];
exports.modules = {

/***/ "(ssr)/../../../../node_modules/debug/src/browser.js":
/*!*****************************************************!*\
  !*** ../../../../node_modules/debug/src/browser.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */ \nexports = module.exports = __webpack_require__(/*! ./debug */ \"(ssr)/../../../../node_modules/debug/src/debug.js\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = \"undefined\" != typeof chrome && \"undefined\" != typeof chrome.storage ? chrome.storage.local : localstorage();\n/**\n * Colors.\n */ exports.colors = [\n    \"lightseagreen\",\n    \"forestgreen\",\n    \"goldenrod\",\n    \"dodgerblue\",\n    \"darkorchid\",\n    \"crimson\"\n];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */ function useColors() {\n    // NB: In an Electron preload script, document will be defined but not fully\n    // initialized. Since we know we're in Chrome, we'll just detect this case\n    // explicitly\n    if (false) {}\n    // is webkit? http://stackoverflow.com/a/16459606/376773\n    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n    return typeof document !== \"undefined\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773\n     false && (0) || // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker\n    typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */ exports.formatters.j = function(v) {\n    try {\n        return JSON.stringify(v);\n    } catch (err) {\n        return \"[UnexpectedJSONParseError]: \" + err.message;\n    }\n};\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */ function formatArgs(args) {\n    var useColors = this.useColors;\n    args[0] = (useColors ? \"%c\" : \"\") + this.namespace + (useColors ? \" %c\" : \" \") + args[0] + (useColors ? \"%c \" : \" \") + \"+\" + exports.humanize(this.diff);\n    if (!useColors) return;\n    var c = \"color: \" + this.color;\n    args.splice(1, 0, c, \"color: inherit\");\n    // the final \"%c\" is somewhat tricky, because there could be other\n    // arguments passed either before or after the %c, so we need to\n    // figure out the correct index to insert the CSS into\n    var index = 0;\n    var lastC = 0;\n    args[0].replace(/%[a-zA-Z%]/g, function(match) {\n        if (\"%%\" === match) return;\n        index++;\n        if (\"%c\" === match) {\n            // we only are interested in the *last* %c\n            // (the user may have provided their own)\n            lastC = index;\n        }\n    });\n    args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */ function log() {\n    // this hackery is required for IE8/9, where\n    // the `console.log` function doesn't have 'apply'\n    return \"object\" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */ function save(namespaces) {\n    try {\n        if (null == namespaces) {\n            exports.storage.removeItem(\"debug\");\n        } else {\n            exports.storage.debug = namespaces;\n        }\n    } catch (e) {}\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */ function load() {\n    var r;\n    try {\n        r = exports.storage.debug;\n    } catch (e) {}\n    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n    if (!r && typeof process !== \"undefined\" && \"env\" in process) {\n        r = process.env.DEBUG;\n    }\n    return r;\n}\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */ exports.enable(load());\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */ function localstorage() {\n    try {\n        return window.localStorage;\n    } catch (e) {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/debug/src/debug.js":
/*!***************************************************!*\
  !*** ../../../../node_modules/debug/src/debug.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */ \nexports = module.exports = createDebug.debug = createDebug[\"default\"] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"(ssr)/../../../../node_modules/ms/index.js\");\n/**\n * The currently active debug mode names, and names to skip.\n */ exports.names = [];\nexports.skips = [];\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */ exports.formatters = {};\n/**\n * Previous log timestamp.\n */ var prevTime;\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */ function selectColor(namespace) {\n    var hash = 0, i;\n    for(i in namespace){\n        hash = (hash << 5) - hash + namespace.charCodeAt(i);\n        hash |= 0; // Convert to 32bit integer\n    }\n    return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */ function createDebug(namespace) {\n    function debug() {\n        // disabled?\n        if (!debug.enabled) return;\n        var self = debug;\n        // set `diff` timestamp\n        var curr = +new Date();\n        var ms = curr - (prevTime || curr);\n        self.diff = ms;\n        self.prev = prevTime;\n        self.curr = curr;\n        prevTime = curr;\n        // turn the `arguments` into a proper Array\n        var args = new Array(arguments.length);\n        for(var i = 0; i < args.length; i++){\n            args[i] = arguments[i];\n        }\n        args[0] = exports.coerce(args[0]);\n        if (\"string\" !== typeof args[0]) {\n            // anything else let's inspect with %O\n            args.unshift(\"%O\");\n        }\n        // apply any `formatters` transformations\n        var index = 0;\n        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n            // if we encounter an escaped % then don't increase the array index\n            if (match === \"%%\") return match;\n            index++;\n            var formatter = exports.formatters[format];\n            if (\"function\" === typeof formatter) {\n                var val = args[index];\n                match = formatter.call(self, val);\n                // now we need to remove `args[index]` since it's inlined in the `format`\n                args.splice(index, 1);\n                index--;\n            }\n            return match;\n        });\n        // apply env-specific formatting (colors, etc.)\n        exports.formatArgs.call(self, args);\n        var logFn = debug.log || exports.log || console.log.bind(console);\n        logFn.apply(self, args);\n    }\n    debug.namespace = namespace;\n    debug.enabled = exports.enabled(namespace);\n    debug.useColors = exports.useColors();\n    debug.color = selectColor(namespace);\n    // env-specific initialization logic for debug instances\n    if (\"function\" === typeof exports.init) {\n        exports.init(debug);\n    }\n    return debug;\n}\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */ function enable(namespaces) {\n    exports.save(namespaces);\n    exports.names = [];\n    exports.skips = [];\n    var split = (typeof namespaces === \"string\" ? namespaces : \"\").split(/[\\s,]+/);\n    var len = split.length;\n    for(var i = 0; i < len; i++){\n        if (!split[i]) continue; // ignore empty strings\n        namespaces = split[i].replace(/\\*/g, \".*?\");\n        if (namespaces[0] === \"-\") {\n            exports.skips.push(new RegExp(\"^\" + namespaces.substr(1) + \"$\"));\n        } else {\n            exports.names.push(new RegExp(\"^\" + namespaces + \"$\"));\n        }\n    }\n}\n/**\n * Disable debug output.\n *\n * @api public\n */ function disable() {\n    exports.enable(\"\");\n}\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */ function enabled(name) {\n    var i, len;\n    for(i = 0, len = exports.skips.length; i < len; i++){\n        if (exports.skips[i].test(name)) {\n            return false;\n        }\n    }\n    for(i = 0, len = exports.names.length; i < len; i++){\n        if (exports.names[i].test(name)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */ function coerce(val) {\n    if (val instanceof Error) return val.stack || val.message;\n    return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/debug/src/debug.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/debug/src/index.js":
/*!***************************************************!*\
  !*** ../../../../node_modules/debug/src/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */ \nif (typeof process !== \"undefined\" && process.type === \"renderer\") {\n    module.exports = __webpack_require__(/*! ./browser.js */ \"(ssr)/../../../../node_modules/debug/src/browser.js\");\n} else {\n    module.exports = __webpack_require__(/*! ./node.js */ \"(ssr)/../../../../node_modules/debug/src/node.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0M7QUFFRCxJQUFJLE9BQU9BLFlBQVksZUFBZUEsUUFBUUMsSUFBSSxLQUFLLFlBQVk7SUFDakVDLCtHQUF5QjtBQUMzQixPQUFPO0lBQ0xBLHlHQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvaW5kZXguanM/N2RjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciBwcm9jZXNzLCB3aGljaCBpcyBub2RlLCBidXQgd2Ugc2hvdWxkXG4gKiB0cmVhdCBhcyBhIGJyb3dzZXIuXG4gKi9cblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIuanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsInR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/debug/src/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/debug/src/node.js":
/*!**************************************************!*\
  !*** ../../../../node_modules/debug/src/node.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */ \nvar tty = __webpack_require__(/*! tty */ \"tty\");\nvar util = __webpack_require__(/*! util */ \"util\");\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */ exports = module.exports = __webpack_require__(/*! ./debug */ \"(ssr)/../../../../node_modules/debug/src/debug.js\");\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n/**\n * Colors.\n */ exports.colors = [\n    6,\n    2,\n    3,\n    4,\n    5,\n    1\n];\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */ exports.inspectOpts = Object.keys(process.env).filter(function(key) {\n    return /^debug_/i.test(key);\n}).reduce(function(obj, key) {\n    // camel-case\n    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {\n        return k.toUpperCase();\n    });\n    // coerce string value into JS value\n    var val = process.env[key];\n    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n    else if (val === \"null\") val = null;\n    else val = Number(val);\n    obj[prop] = val;\n    return obj;\n}, {});\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */ var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nif (1 !== fd && 2 !== fd) {\n    util.deprecate(function() {}, \"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)\")();\n}\nvar stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */ function useColors() {\n    return \"colors\" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);\n}\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */ exports.formatters.o = function(v) {\n    this.inspectOpts.colors = this.useColors;\n    return util.inspect(v, this.inspectOpts).split(\"\\n\").map(function(str) {\n        return str.trim();\n    }).join(\" \");\n};\n/**\n * Map %o to `util.inspect()`, allowing multiple lines if needed.\n */ exports.formatters.O = function(v) {\n    this.inspectOpts.colors = this.useColors;\n    return util.inspect(v, this.inspectOpts);\n};\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */ function formatArgs(args) {\n    var name = this.namespace;\n    var useColors = this.useColors;\n    if (useColors) {\n        var c = this.color;\n        var prefix = \"  \\x1b[3\" + c + \";1m\" + name + \" \" + \"\\x1b[0m\";\n        args[0] = prefix + args[0].split(\"\\n\").join(\"\\n\" + prefix);\n        args.push(\"\\x1b[3\" + c + \"m+\" + exports.humanize(this.diff) + \"\\x1b[0m\");\n    } else {\n        args[0] = new Date().toUTCString() + \" \" + name + \" \" + args[0];\n    }\n}\n/**\n * Invokes `util.format()` with the specified arguments and writes to `stream`.\n */ function log() {\n    return stream.write(util.format.apply(util, arguments) + \"\\n\");\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */ function save(namespaces) {\n    if (null == namespaces) {\n        // If you set a process.env field to null or undefined, it gets cast to the\n        // string 'null' or 'undefined'. Just delete instead.\n        delete process.env.DEBUG;\n    } else {\n        process.env.DEBUG = namespaces;\n    }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */ function load() {\n    return process.env.DEBUG;\n}\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */ function createWritableStdioStream(fd) {\n    var stream;\n    var tty_wrap = process.binding(\"tty_wrap\");\n    // Note stream._type is used for test-module-load-list.js\n    switch(tty_wrap.guessHandleType(fd)){\n        case \"TTY\":\n            stream = new tty.WriteStream(fd);\n            stream._type = \"tty\";\n            // Hack to have stream not keep the event loop alive.\n            // See https://github.com/joyent/node/issues/1726\n            if (stream._handle && stream._handle.unref) {\n                stream._handle.unref();\n            }\n            break;\n        case \"FILE\":\n            var fs = __webpack_require__(/*! fs */ \"fs\");\n            stream = new fs.SyncWriteStream(fd, {\n                autoClose: false\n            });\n            stream._type = \"fs\";\n            break;\n        case \"PIPE\":\n        case \"TCP\":\n            var net = __webpack_require__(/*! net */ \"net\");\n            stream = new net.Socket({\n                fd: fd,\n                readable: false,\n                writable: true\n            });\n            // FIXME Should probably have an option in net.Socket to create a\n            // stream from an existing fd which is writable only. But for now\n            // we'll just add this hack and set the `readable` member to false.\n            // Test: ./node test/fixtures/echo.js < /etc/passwd\n            stream.readable = false;\n            stream.read = null;\n            stream._type = \"pipe\";\n            // FIXME Hack to have stream not keep the event loop alive.\n            // See https://github.com/joyent/node/issues/1726\n            if (stream._handle && stream._handle.unref) {\n                stream._handle.unref();\n            }\n            break;\n        default:\n            // Probably an error on in uv_guess_handle()\n            throw new Error(\"Implement me. Unknown stream file type!\");\n    }\n    // For supporting legacy API we put the FD here.\n    stream.fd = fd;\n    stream._isStdio = true;\n    return stream;\n}\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */ function init(debug) {\n    debug.inspectOpts = {};\n    var keys = Object.keys(exports.inspectOpts);\n    for(var i = 0; i < keys.length; i++){\n        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n    }\n}\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */ exports.enable(load());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/debug/src/node.js\n");

/***/ })

};
;